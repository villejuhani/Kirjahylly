package kirjahylly.test;
// Generated by ComTest BEGIN
import java.io.File;
import kirjahylly.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.07.24 17:32:23 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class KirjailijatTest {



  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta66 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta66() throws SailoException {    // Kirjailijat: 66
    Kirjailijat kirjailijat = new Kirjailijat(); 
    Kirjailija kirjailija21 = new Kirjailija(); kirjailija21.vastaaHarari(); 
    Kirjailija kirjailija11 = new Kirjailija(); kirjailija11.vastaaHarari(); 
    Kirjailija kirjailija22 = new Kirjailija(); kirjailija22.vastaaHarari(); 
    Kirjailija kirjailija12 = new Kirjailija(); kirjailija12.vastaaHarari(); 
    Kirjailija kirjailija23 = new Kirjailija(); kirjailija23.vastaaHarari(); 
    String tiedNimi = "testikirjailijat"; 
    File ftied = new File(tiedNimi+".dat"); 
    ftied.delete(); 
    try {
    kirjailijat.lueTiedostosta(tiedNimi); 
    fail("Kirjailijat: 78 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    kirjailijat.lisaa(kirjailija21); 
    kirjailijat.lisaa(kirjailija11); 
    kirjailijat.lisaa(kirjailija22); 
    kirjailijat.lisaa(kirjailija12); 
    kirjailijat.lisaa(kirjailija23); 
    kirjailijat.tallenna(); 
    kirjailijat = new Kirjailijat(); 
    kirjailijat.lueTiedostosta(tiedNimi); 
    Iterator<Kirjailija> i = kirjailijat.iterator(); 
    assertEquals("From: Kirjailijat line: 88", kirjailija21.toString(), i.next().toString()); 
    assertEquals("From: Kirjailijat line: 89", kirjailija11.toString(), i.next().toString()); 
    assertEquals("From: Kirjailijat line: 90", kirjailija22.toString(), i.next().toString()); 
    assertEquals("From: Kirjailijat line: 91", kirjailija12.toString(), i.next().toString()); 
    assertEquals("From: Kirjailijat line: 92", kirjailija23.toString(), i.next().toString()); 
    assertEquals("From: Kirjailijat line: 93", false, i.hasNext()); 
    kirjailijat.lisaa(kirjailija23); 
    kirjailijat.tallenna(); 
    assertEquals("From: Kirjailijat line: 96", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".bak"); 
    assertEquals("From: Kirjailijat line: 98", true, fbak.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testIterator211 */
  @Test
  public void testIterator211() {    // Kirjailijat: 211
    Kirjailijat kirjailijat = new Kirjailijat(); 
    Kirjailija kirj21 = new Kirjailija("Harari"); kirjailijat.lisaa(kirj21); 
    Kirjailija kirj11 = new Kirjailija("Austen"); kirjailijat.lisaa(kirj11); 
    Kirjailija kirj22 = new Kirjailija("Shelley"); kirjailijat.lisaa(kirj22); 
    Iterator<Kirjailija> i2=kirjailijat.iterator(); 
    assertEquals("From: Kirjailijat line: 221", kirj21, i2.next()); 
    assertEquals("From: Kirjailijat line: 222", kirj11, i2.next()); 
    assertEquals("From: Kirjailijat line: 223", kirj22, i2.next()); 
    try {
    assertEquals("From: Kirjailijat line: 224", kirj11, i2.next()); 
    fail("Kirjailijat: 224 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaKirjailijat239 */
  @Test
  public void testAnnaKirjailijat239() {    // Kirjailijat: 239
    Kirjailijat kirjailijat = new Kirjailijat(); 
    Kirjailija kirj21 = new Kirjailija(); kirj21.vastaaHarari(); kirj21.rekisteroi(); kirjailijat.lisaa(kirj21); 
    Kirjailija kirj11 = new Kirjailija(); kirj11.vastaaHarari(); kirj11.rekisteroi(); kirjailijat.lisaa(kirj11); 
    Kirjailija kirj22 = new Kirjailija(); kirj22.vastaaHarari(); kirj22.rekisteroi(); kirjailijat.lisaa(kirj22); 
    Kirjailija kirj12 = new Kirjailija(); kirj12.vastaaHarari(); kirj12.rekisteroi(); kirjailijat.lisaa(kirj12); 
    Kirjailija kirj23 = new Kirjailija(); kirj23.vastaaHarari(); kirj23.rekisteroi(); kirjailijat.lisaa(kirj23); 
    List<Kirjailija> loytyneet; 
    loytyneet = kirjailijat.annaKirjailijat(3); 
    assertEquals("From: Kirjailijat line: 252", 1, loytyneet.size()); 
    loytyneet = kirjailijat.annaKirjailijat(1); 
    assertEquals("From: Kirjailijat line: 254", true, loytyneet.get(0) == kirj21); 
    assertEquals("From: Kirjailijat line: 255", false, loytyneet.get(0) == kirj12); 
    loytyneet = kirjailijat.annaKirjailijat(2); 
    assertEquals("From: Kirjailijat line: 257", true, loytyneet.get(0) == kirj11); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaKirjailijat272 */
  @Test
  public void testAnnaKirjailijat272() {    // Kirjailijat: 272
    Kirjailijat kirjailijat = new Kirjailijat(); 
    Kirjailija kirj25 = new Kirjailija("Harari"); kirj25.rekisteroi(); kirjailijat.lisaa(kirj25); 
    Kirjailija kirj17 = new Kirjailija("Austen"); kirj17.rekisteroi(); kirjailijat.lisaa(kirj17); 
    Kirjailija kirj27 = new Kirjailija("Shelley"); kirj27.rekisteroi(); kirjailijat.lisaa(kirj27); 
    List<Kirjailija> loytyneet; 
    loytyneet = kirjailijat.annaKirjailijat(); 
    assertEquals("From: Kirjailijat line: 283", 3, loytyneet.size()); 
    assertEquals("From: Kirjailijat line: 284", true, loytyneet.get(0) == kirj25); 
    assertEquals("From: Kirjailijat line: 285", true, loytyneet.get(2) == kirj27); 
    assertEquals("From: Kirjailijat line: 286", false, loytyneet.get(0) == kirj17); 
  } // Generated by ComTest END
}