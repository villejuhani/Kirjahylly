package kirjahylly.test;
// Generated by ComTest BEGIN
import java.io.File;
import kirjahylly.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.07.23 18:59:38 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class KirjatTest {



  // Generated by ComTest BEGIN
  /** testLisaa47 */
  @Test
  public void testLisaa47() {    // Kirjat: 47
    Kirjat kirjat = new Kirjat(); 
    Kirja kirja1 = new Kirja(), kirja2 = new Kirja(); 
    assertEquals("From: Kirjat line: 50", 0, kirjat.getLkm()); 
    kirjat.lisaa(kirja1); assertEquals("From: Kirjat line: 51", 1, kirjat.getLkm()); 
    kirjat.lisaa(kirja2); assertEquals("From: Kirjat line: 52", 2, kirjat.getLkm()); 
    kirjat.lisaa(kirja1); assertEquals("From: Kirjat line: 53", 3, kirjat.getLkm()); 
    assertEquals("From: Kirjat line: 54", kirja1, kirjat.anna(0)); 
    assertEquals("From: Kirjat line: 55", kirja2, kirjat.anna(1)); 
    assertEquals("From: Kirjat line: 56", kirja1, kirjat.anna(2)); 
    assertEquals("From: Kirjat line: 57", false, kirjat.anna(1) == kirja1); 
    assertEquals("From: Kirjat line: 58", true, kirjat.anna(1) == kirja2); 
    try {
    assertEquals("From: Kirjat line: 59", kirja1, kirjat.anna(3)); 
    fail("Kirjat: 59 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    kirjat.lisaa(kirja1); assertEquals("From: Kirjat line: 60", 4, kirjat.getLkm()); 
    kirjat.lisaa(kirja1); assertEquals("From: Kirjat line: 61", 5, kirjat.getLkm()); 
    kirjat.lisaa(kirja1); assertEquals("From: Kirjat line: 62", 6, kirjat.getLkm()); 
    kirjat.lisaa(kirja1); assertEquals("From: Kirjat line: 63", 7, kirjat.getLkm()); 
    kirjat.lisaa(kirja1); assertEquals("From: Kirjat line: 64", 8, kirjat.getLkm()); 
    kirjat.lisaa(kirja1); assertEquals("From: Kirjat line: 65", 9, kirjat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta94 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta94() throws SailoException {    // Kirjat: 94
    Kirjat kirjat = new Kirjat(); 
    Kirja kirja1 = new Kirja(), kirja2 = new Kirja(); 
    kirja1.taytaSapiensTiedoilla(); 
    kirja2.taytaSapiensTiedoilla(); 
    String hakemisto = "testikirjat"; 
    String tiedNimi = hakemisto+"/kirjat"; 
    File ftied = new File(tiedNimi+".dat"); 
    File dir = new File(hakemisto); 
    dir.mkdir(); 
    ftied.delete(); 
    try {
    kirjat.lueTiedostosta(tiedNimi); 
    fail("Kirjat: 108 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    kirjat.lisaa(kirja1); 
    kirjat.lisaa(kirja2); 
    kirjat.tallenna(); 
    kirjat = new Kirjat();  // Poistetaan vanhat luomalla uusi
    kirjat.lueTiedostosta(tiedNimi);  // johon ladataan tiedot tiedostosta.
    Iterator<Kirja> i = kirjat.iterator(); 
    assertEquals("From: Kirjat line: 115", kirja1, i.next()); 
    assertEquals("From: Kirjat line: 116", kirja2, i.next()); 
    assertEquals("From: Kirjat line: 117", false, i.hasNext()); 
    kirjat.lisaa(kirja2); 
    kirjat.tallenna(); 
    assertEquals("From: Kirjat line: 120", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".bak"); 
    assertEquals("From: Kirjat line: 122", true, fbak.delete()); 
    assertEquals("From: Kirjat line: 123", true, dir.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKirjatIterator256 
   * @throws SailoException when error
   */
  @Test
  public void testKirjatIterator256() throws SailoException {    // Kirjat: 256
    Kirjat kirjat = new Kirjat(); 
    Kirja kirja1 = new Kirja(); Kirja kirja2 = new Kirja(); 
    kirja1.rekisteroi(); kirja2.rekisteroi(); 
    kirjat.lisaa(kirja1); kirjat.lisaa(kirja2); 
    StringBuilder sb = new StringBuilder(); 
    for (Kirja kirja : kirjat) sb.append(" " + kirja.getTunnusNro()); 
    String tulos = " " + kirja1.getTunnusNro() + " " + kirja2.getTunnusNro(); 
    assertEquals("From: Kirjat line: 269", tulos, sb.toString()); 
    sb = new StringBuilder(); 
    for (Iterator<Kirja>  i=kirjat.iterator(); i.hasNext(); ) {
    Kirja kirja = i.next(); 
    sb.append(" "+kirja.getTunnusNro()); 
    }
    assertEquals("From: Kirjat line: 277", tulos, sb.toString()); 
    Iterator<Kirja>  i=kirjat.iterator(); 
    assertEquals("From: Kirjat line: 280", true, i.next() == kirja1); 
    assertEquals("From: Kirjat line: 281", true, i.next() == kirja2); 
    try {
    i.next(); 
    fail("Kirjat: 283 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsi343 
   * @throws SailoException when error
   */
  @Test
  public void testEtsi343() throws SailoException {    // Kirjat: 343
    Kirjat kirjat = new Kirjat(); 
    Kirja kirja1 = new Kirja(); kirja1.parse("2|Sapiens|Tietokirjallisuus|2011|491|luettu|||3.2020|8|hauska"); 
    Kirja kirja2 = new Kirja(); kirja2.parse("3|Frankenstein|Kauhu, romantiikka|1800|200|luettu|2017|||7|-"); 
    kirjat.lisaa(kirja1); kirjat.lisaa(kirja2); 
  } // Generated by ComTest END
}