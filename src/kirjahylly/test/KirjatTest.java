package kirjahylly.test;
// Generated by ComTest BEGIN
import kirjahylly.*;
import java.io.File;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.07.31 06:47:10 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class KirjatTest {



  // Generated by ComTest BEGIN
  /** testLisaa49 */
  @Test
  public void testLisaa49() {    // Kirjat: 49
    Kirjat kirjat = new Kirjat(); 
    Kirja kirja1 = new Kirja(), kirja2 = new Kirja(); 
    assertEquals("From: Kirjat line: 52", 0, kirjat.getLkm()); 
    kirjat.lisaa(kirja1); assertEquals("From: Kirjat line: 53", 1, kirjat.getLkm()); 
    kirjat.lisaa(kirja2); assertEquals("From: Kirjat line: 54", 2, kirjat.getLkm()); 
    kirjat.lisaa(kirja1); assertEquals("From: Kirjat line: 55", 3, kirjat.getLkm()); 
    assertEquals("From: Kirjat line: 56", kirja1, kirjat.anna(0)); 
    assertEquals("From: Kirjat line: 57", kirja2, kirjat.anna(1)); 
    assertEquals("From: Kirjat line: 58", kirja1, kirjat.anna(2)); 
    assertEquals("From: Kirjat line: 59", false, kirjat.anna(1) == kirja1); 
    assertEquals("From: Kirjat line: 60", true, kirjat.anna(1) == kirja2); 
    try {
    assertEquals("From: Kirjat line: 61", kirja1, kirjat.anna(3)); 
    fail("Kirjat: 61 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    kirjat.lisaa(kirja1); assertEquals("From: Kirjat line: 62", 4, kirjat.getLkm()); 
    kirjat.lisaa(kirja1); assertEquals("From: Kirjat line: 63", 5, kirjat.getLkm()); 
    kirjat.lisaa(kirja1); assertEquals("From: Kirjat line: 64", 6, kirjat.getLkm()); 
    kirjat.lisaa(kirja1); assertEquals("From: Kirjat line: 65", 7, kirjat.getLkm()); 
    kirjat.lisaa(kirja1); assertEquals("From: Kirjat line: 66", 8, kirjat.getLkm()); 
    kirjat.lisaa(kirja1); assertEquals("From: Kirjat line: 67", 9, kirjat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa80 
   * @throws SailoException when error
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa80() throws SailoException,CloneNotSupportedException {    // Kirjat: 80
    Kirjat kirjat = new Kirjat(); 
    Kirja kirja1 = new Kirja(), kirja2 = new Kirja(); 
    kirja1.rekisteroi(); kirja2.rekisteroi(); 
    assertEquals("From: Kirjat line: 86", 0, kirjat.getLkm()); 
    kirjat.korvaaTaiLisaa(kirja1); assertEquals("From: Kirjat line: 87", 1, kirjat.getLkm()); 
    kirjat.korvaaTaiLisaa(kirja2); assertEquals("From: Kirjat line: 88", 2, kirjat.getLkm()); 
    Kirja kirja3 = kirja1.clone(); 
    kirja3.aseta(4,"2000"); 
    Iterator<Kirja> it = kirjat.iterator(); 
    assertEquals("From: Kirjat line: 92", true, it.next() == kirja1); 
    kirjat.korvaaTaiLisaa(kirja3); assertEquals("From: Kirjat line: 93", 2, kirjat.getLkm()); 
    it = kirjat.iterator(); 
    Kirja j0 = it.next(); 
    assertEquals("From: Kirjat line: 96", kirja3, j0); 
    assertEquals("From: Kirjat line: 97", true, j0 == kirja3); 
    assertEquals("From: Kirjat line: 98", false, j0 == kirja1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista132 
   * @throws SailoException when error
   */
  @Test
  public void testPoista132() throws SailoException {    // Kirjat: 132
    Kirjat kirjat = new Kirjat(); 
    Kirja kirja1 = new Kirja(), kirja2 = new Kirja(), kirja3 = new Kirja(); 
    kirja1.rekisteroi(); kirja2.rekisteroi(); kirja3.rekisteroi(); 
    int id1 = kirja1.getTunnusNro(); 
    kirjat.lisaa(kirja1); kirjat.lisaa(kirja2); kirjat.lisaa(kirja3); 
    assertEquals("From: Kirjat line: 139", 1, kirjat.poista(id1+1)); 
    assertEquals("From: Kirjat line: 140", null, kirjat.annaId(id1+1)); assertEquals("From: Kirjat line: 140", 2, kirjat.getLkm()); 
    assertEquals("From: Kirjat line: 141", 1, kirjat.poista(id1)); assertEquals("From: Kirjat line: 141", 1, kirjat.getLkm()); 
    assertEquals("From: Kirjat line: 142", 0, kirjat.poista(id1+3)); assertEquals("From: Kirjat line: 142", 1, kirjat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAnnaId162 
   * @throws SailoException when error
   */
  @Test
  public void testAnnaId162() throws SailoException {    // Kirjat: 162
    Kirjat kirjat = new Kirjat(); 
    Kirja kirja1 = new Kirja(); Kirja kirja2 = new Kirja(); Kirja kirja3 = new Kirja(); 
    kirja1.rekisteroi(); kirja2.rekisteroi(); kirja3.rekisteroi(); 
    int id1 = kirja1.getTunnusNro(); 
    kirjat.lisaa(kirja1); kirjat.lisaa(kirja2); kirjat.lisaa(kirja3); 
    assertEquals("From: Kirjat line: 169", true, kirjat.annaId(id1+1) == kirja2); 
    assertEquals("From: Kirjat line: 170", true, kirjat.annaId(id1+2) == kirja3); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsiId184 
   * @throws SailoException when error
   */
  @Test
  public void testEtsiId184() throws SailoException {    // Kirjat: 184
    Kirjat kirjat = new Kirjat(); 
    Kirja kirja1 = new Kirja(); Kirja kirja2 = new Kirja(); Kirja kirja3 = new Kirja(); 
    kirja1.rekisteroi(); kirja2.rekisteroi(); kirja3.rekisteroi(); 
    int id1 = kirja1.getTunnusNro(); 
    kirjat.lisaa(kirja1); kirjat.lisaa(kirja2); kirjat.lisaa(kirja3); 
    assertEquals("From: Kirjat line: 191", 1, kirjat.etsiId(id1+1)); 
    assertEquals("From: Kirjat line: 192", 2, kirjat.etsiId(id1+2)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta207 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta207() throws SailoException {    // Kirjat: 207
    Kirjat kirjat = new Kirjat(); 
    Kirja kirja1 = new Kirja(), kirja2 = new Kirja(); 
    kirja1.taytaSapiensTiedoilla(); 
    kirja2.taytaSapiensTiedoilla(); 
    String hakemisto = "testikirjat"; 
    String tiedNimi = hakemisto+"/kirjat"; 
    File ftied = new File(tiedNimi+".dat"); 
    File dir = new File(hakemisto); 
    dir.mkdir(); 
    ftied.delete(); 
    try {
    kirjat.lueTiedostosta(tiedNimi); 
    fail("Kirjat: 221 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    kirjat.lisaa(kirja1); 
    kirjat.lisaa(kirja2); 
    kirjat.tallenna(); 
    kirjat = new Kirjat();  // Poistetaan vanhat luomalla uusi
    kirjat.lueTiedostosta(tiedNimi);  // johon ladataan tiedot tiedostosta.
    Iterator<Kirja> i = kirjat.iterator(); 
    assertEquals("From: Kirjat line: 228", kirja1, i.next()); 
    assertEquals("From: Kirjat line: 229", kirja2, i.next()); 
    assertEquals("From: Kirjat line: 230", false, i.hasNext()); 
    kirjat.lisaa(kirja2); 
    kirjat.tallenna(); 
    assertEquals("From: Kirjat line: 233", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".bak"); 
    assertEquals("From: Kirjat line: 235", true, fbak.delete()); 
    assertEquals("From: Kirjat line: 236", true, dir.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKirjatIterator369 
   * @throws SailoException when error
   */
  @Test
  public void testKirjatIterator369() throws SailoException {    // Kirjat: 369
    Kirjat kirjat = new Kirjat(); 
    Kirja kirja1 = new Kirja(); Kirja kirja2 = new Kirja(); 
    kirja1.rekisteroi(); kirja2.rekisteroi(); 
    kirjat.lisaa(kirja1); kirjat.lisaa(kirja2); 
    StringBuilder sb = new StringBuilder(); 
    for (Kirja kirja : kirjat) sb.append(" " + kirja.getTunnusNro()); 
    String tulos = " " + kirja1.getTunnusNro() + " " + kirja2.getTunnusNro(); 
    assertEquals("From: Kirjat line: 382", tulos, sb.toString()); 
    sb = new StringBuilder(); 
    for (Iterator<Kirja>  i=kirjat.iterator(); i.hasNext(); ) {
    Kirja kirja = i.next(); 
    sb.append(" "+kirja.getTunnusNro()); 
    }
    assertEquals("From: Kirjat line: 390", tulos, sb.toString()); 
    Iterator<Kirja>  i=kirjat.iterator(); 
    assertEquals("From: Kirjat line: 393", true, i.next() == kirja1); 
    assertEquals("From: Kirjat line: 394", true, i.next() == kirja2); 
    try {
    i.next(); 
    fail("Kirjat: 396 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsi456 
   * @throws SailoException when error
   */
  @Test
  public void testEtsi456() throws SailoException {    // Kirjat: 456
    Kirjat kirjat = new Kirjat(); 
    Kirja kirja1 = new Kirja(); kirja1.parse("1|Sapiens|0|Tietokirjallisuus|"); 
    Kirja kirja2 = new Kirja(); kirja2.parse("2|Frankenstein|2|Kauhu|"); 
    Kirja kirja3 = new Kirja(); kirja3.parse("3|Ylpeys|1|Romantiikka"); 
    kirjat.lisaa(kirja1); kirjat.lisaa(kirja2); kirjat.lisaa(kirja3); 
    List<Kirja> loytyneet; 
    loytyneet = (List<Kirja>)kirjat.etsi("*a*",0); 
    assertEquals("From: Kirjat line: 465", 2, loytyneet.size()); 
    assertEquals("From: Kirjat line: 466", true, loytyneet.get(0) == kirja2); 
    assertEquals("From: Kirjat line: 467", true, loytyneet.get(1) == kirja1); 
    loytyneet = (List<Kirja>)kirjat.etsi("*lp*",2); 
    assertEquals("From: Kirjat line: 470", 1, loytyneet.size()); 
    assertEquals("From: Kirjat line: 471", true, loytyneet.get(0) == kirja3); 
    loytyneet = (List<Kirja>)kirjat.etsi(null,-1); 
    assertEquals("From: Kirjat line: 474", 3, loytyneet.size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testKaanteinenJarj500 */
  @Test
  public void testKaanteinenJarj500() {    // Kirjat: 500
    Kirjat kirjat = new Kirjat(); 
    Kirja kirja1 = new Kirja(); kirja1.parse("1|Sapiens|0|Tietokirjallisuus|"); 
    Kirja kirja2 = new Kirja(); kirja2.parse("2|Frankenstein|2|Kauhu|"); 
    Kirja kirja3 = new Kirja(); kirja3.parse("3|Ylpeys|1|Romantiikka"); 
    kirjat.lisaa(kirja1); kirjat.lisaa(kirja2); kirjat.lisaa(kirja3); 
    List<Kirja> loytyneet; 
    loytyneet = (List<Kirja>)kirjat.etsi(null,0); 
    assertEquals("From: Kirjat line: 508", 3, loytyneet.size()); 
    assertEquals("From: Kirjat line: 509", true, loytyneet.get(0) == kirja2); 
    assertEquals("From: Kirjat line: 510", true, loytyneet.get(1) == kirja1); 
    loytyneet = kirjat.kaanteinenJarj(loytyneet); 
    assertEquals("From: Kirjat line: 512", true, loytyneet.get(0) == kirja3); 
    assertEquals("From: Kirjat line: 513", true, loytyneet.get(1) == kirja1); 
  } // Generated by ComTest END
}